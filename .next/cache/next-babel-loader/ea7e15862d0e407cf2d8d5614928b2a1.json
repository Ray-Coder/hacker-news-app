{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst postsDirectory = path.join(process.cwd(), 'posts');\nexport async function getSortedPostsData() {\n  const res = await fetch('https://hn.algolia.com/api/v1/search_by_date?tags=story,front_page');\n  const posts = await res.json();\n  console.log(posts);\n  return posts.hits.map(post => {\n    return {\n      id: post.story_id,\n      url: post.url,\n      title: post.title\n    };\n  });\n}\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport async function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/Users/payelroybarman/Documents/sapient/hacker-news-app/lib/posts.js"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getSortedPostsData","res","fetch","posts","json","console","log","hits","map","post","id","story_id","url","title","getAllPostIds","fileNames","readdirSync","fileName","params","replace","getPostData","fullPath","fileContents","readFileSync","matterResult","processedContent","use","content","contentHtml","toString","data"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,eAAeC,kBAAf,GAAoC;AACzC,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,oEAAD,CAAvB;AACA,QAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,SAAOA,KAAK,CAACI,IAAN,CAAWC,GAAX,CAAeC,IAAI,IAAI;AAC5B,WAAO;AACHC,MAAAA,EAAE,EAAED,IAAI,CAACE,QADN;AAEHC,MAAAA,GAAG,EAAEH,IAAI,CAACG,GAFP;AAGHC,MAAAA,KAAK,EAAEJ,IAAI,CAACI;AAHT,KAAP;AAKD,GANM,CAAP;AAOD;AACD,OAAO,SAASC,aAAT,GAAyB;AAC5B,QAAMC,SAAS,GAAGxB,EAAE,CAACyB,WAAH,CAAepB,cAAf,CAAlB,CAD4B,CAG5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOmB,SAAS,CAACP,GAAV,CAAcS,QAAQ,IAAI;AAC/B,WAAO;AACLC,MAAAA,MAAM,EAAE;AACNR,QAAAA,EAAE,EAAEO,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AACF,OAAO,eAAeC,WAAf,CAA2BV,EAA3B,EAA+B;AACrC,QAAMW,QAAQ,GAAG7B,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA2B,GAAEc,EAAG,KAAhC,CAAjB;AACA,QAAMY,YAAY,GAAG/B,EAAE,CAACgC,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAFqC,CAIrC;;AACA,QAAMG,YAAY,GAAG/B,MAAM,CAAC6B,YAAD,CAA3B,CALqC,CAOrC;;AACA,QAAMG,gBAAgB,GAAG,MAAM/B,MAAM,GAClCgC,GAD4B,CACxB/B,IADwB,EAE5BG,OAF4B,CAEpB0B,YAAY,CAACG,OAFO,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB,CAXqC,CAarC;;AACA;AACEnB,IAAAA,EADF;AAEEkB,IAAAA;AAFF,KAGKJ,YAAY,CAACM,IAHlB;AAKD","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n \nconst postsDirectory = path.join(process.cwd(), 'posts')\n\nexport async function getSortedPostsData() {\n  const res = await fetch('https://hn.algolia.com/api/v1/search_by_date?tags=story,front_page')\n  const posts = await res.json();\n  console.log(posts)\n  return posts.hits.map(post => {\n    return {\n        id: post.story_id,\n        url: post.url,\n        title: post.title\n    }\n  })\n}\nexport function getAllPostIds() {\n    const fileNames = fs.readdirSync(postsDirectory)\n  \n    // Returns an array that looks like this:\n    // [\n    //   {\n    //     params: {\n    //       id: 'ssg-ssr'\n    //     }\n    //   },\n    //   {\n    //     params: {\n    //       id: 'pre-rendering'\n    //     }\n    //   }\n    // ]\n    return fileNames.map(fileName => {\n      return {\n        params: {\n          id: fileName.replace(/\\.md$/, '')\n        }\n      }\n    })\n  }\n export async function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`)\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n  // Use gray-matter to parse the post metadata section\n  const matterResult = matter(fileContents)\n\n  // Use remark to convert markdown into HTML string\n  const processedContent = await remark()\n    .use(html)\n    .process(matterResult.content)\n  const contentHtml = processedContent.toString()\n\n  // Combine the data with the id and contentHtml\n  return {\n    id,\n    contentHtml,\n    ...matterResult.data\n  }\n}"]},"metadata":{},"sourceType":"module"}