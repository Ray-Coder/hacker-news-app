{"ast":null,"code":"var _jsxFileName = \"/Users/payelroybarman/Documents/sapient/hacker-news-app/components/NewsList/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { useRouter } from \"next/router\";\nimport utilStyles from '../../styles/utils.module.css';\n\nconst UserList = ({\n  allPostsData\n}) => {\n  const {\n    0: users,\n    1: setUsers\n  } = useState([]);\n  const router = useRouter();\n  useEffect(() => {\n    if (allPostsData) {\n      setUsers(allPostsData.id);\n    }\n  }, [allPostsData]); // Triggers fetch for new page\n\n  const handlePagination = page => {\n    const path = router.pathname;\n    const query = router.query;\n    query.page = page.selected + 1;\n    router.push({\n      pathname: path,\n      query: query\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"ul\", {\n    className: utilStyles.list,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, allPostsData.map(({\n    id,\n    url,\n    title\n  }) => __jsx(\"li\", {\n    className: utilStyles.listItem,\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, __jsx(Link, {\n    href: `${url}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  }, title.replace(/<[^>]+>/g, '')))))), __jsx(ReactPaginate, {\n    marginPagesDisplayed: 2,\n    pageRangeDisplayed: 5,\n    previousLabel: \"previous\",\n    nextLabel: \"next\",\n    breakLabel: \"...\",\n    initialPage: allPostsData.curPage - 1,\n    pageCount: allPostsData.maxPage,\n    onPageChange: handlePagination,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }));\n};\n\nexport default UserList;","map":{"version":3,"sources":["/Users/payelroybarman/Documents/sapient/hacker-news-app/components/NewsList/index.js"],"names":["React","useState","useEffect","ReactPaginate","useRouter","utilStyles","UserList","allPostsData","users","setUsers","router","id","handlePagination","page","path","pathname","query","selected","push","list","map","url","title","listItem","replace","curPage","maxPage"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,UAAP,MAAuB,+BAAvB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAsB;AACnC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMS,MAAM,GAAGN,SAAS,EAAxB;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,YAAJ,EAAkB;AAEdE,MAAAA,QAAQ,CAACF,YAAY,CAACI,EAAd,CAAR;AACH;AACF,GALQ,EAKN,CAACJ,YAAD,CALM,CAAT,CAHmC,CASnC;;AACA,QAAMK,gBAAgB,GAAGC,IAAI,IAAI;AAC/B,UAAMC,IAAI,GAAGJ,MAAM,CAACK,QAApB;AACA,UAAMC,KAAK,GAAGN,MAAM,CAACM,KAArB;AACAA,IAAAA,KAAK,CAACH,IAAN,GAAaA,IAAI,CAACI,QAAL,GAAgB,CAA7B;AACAP,IAAAA,MAAM,CAACQ,IAAP,CAAY;AACVH,MAAAA,QAAQ,EAAED,IADA;AAEVE,MAAAA,KAAK,EAAEA;AAFG,KAAZ;AAID,GARD;;AASA,SACI,4BACE;AAAI,IAAA,SAAS,EAAEX,UAAU,CAACc,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCZ,YAAY,CAACa,GAAb,CAAiB,CAAC;AAAET,IAAAA,EAAF;AAAMU,IAAAA,GAAN;AAAWC,IAAAA;AAAX,GAAD,KAChB;AAAI,IAAA,SAAS,EAAEjB,UAAU,CAACkB,QAA1B;AAAoC,IAAA,GAAG,EAAEZ,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,IAAD;AAAM,IAAA,IAAI,EAAG,GAAEU,GAAI,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,KAAK,CAACE,OAAN,CAAc,UAAd,EAA0B,EAA1B,CAAJ,CADF,CADA,CADD,CADD,CADF,EAWE,MAAC,aAAD;AACE,IAAA,oBAAoB,EAAE,CADxB;AAEE,IAAA,kBAAkB,EAAE,CAFtB;AAGE,IAAA,aAAa,EAAE,UAHjB;AAIE,IAAA,SAAS,EAAE,MAJb;AAKE,IAAA,UAAU,EAAE,KALd;AAME,IAAA,WAAW,EAAEjB,YAAY,CAACkB,OAAb,GAAuB,CANtC;AAOE,IAAA,SAAS,EAAElB,YAAY,CAACmB,OAP1B;AAQE,IAAA,YAAY,EAAEd,gBARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADJ;AAwBC,CA3CL;;AA4CI,eAAeN,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport ReactPaginate from \"react-paginate\"\nimport { useRouter } from \"next/router\"\nimport utilStyles from '../../styles/utils.module.css'\n\nconst UserList = ({ allPostsData }) => {\n    const [users, setUsers] = useState([])\n    const router = useRouter()\n    useEffect(() => {\n      if (allPostsData) {\n        \n          setUsers(allPostsData.id)\n      }\n    }, [allPostsData])\n    // Triggers fetch for new page\n    const handlePagination = page => {\n      const path = router.pathname\n      const query = router.query\n      query.page = page.selected + 1\n      router.push({\n        pathname: path,\n        query: query,\n      })\n    }\n    return (\n        <>\n          <ul className={utilStyles.list}>\n          {allPostsData.map(({ id, url, title }) => (\n            <li className={utilStyles.listItem} key={id}>\n            <Link href={`${url}`}>\n              <a>{title.replace(/<[^>]+>/g, '')}</a>\n            </Link>\n            \n            </li>\n          ))}\n          </ul>\n          <ReactPaginate\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            previousLabel={\"previous\"}\n            nextLabel={\"next\"}\n            breakLabel={\"...\"}\n            initialPage={allPostsData.curPage - 1}\n            pageCount={allPostsData.maxPage}\n            onPageChange={handlePagination}\n          />\n        </>\n      )\n    }\n    export default UserList"]},"metadata":{},"sourceType":"module"}